<section class="menu__section">
    <ul class="menu">
        <li><a class='menu__item @(Context.GetLink("/index.html"))' href="/">Home</a></li>
        @{
            List<Tuple<string, string>> pages = Context
                .Documents[Blog.Pages]
                .Where(x => x.Bool(BlogKeys.ShowInNavbar, true))
                .Where(x => x.FilePath(Keys.RelativeFilePath)?.FullPath?.StartsWith("index") == (bool?)false)
                .Select(x => Tuple.Create(x.WithoutSettings.String(Keys.Title), Context.GetLink(x)))
                .Where(x => !string.IsNullOrEmpty(x.Item1))
                .OrderBy(x => x.Item1)
                .ToList();
            if(Documents[Blog.Tags].Any())
            {
                pages.Insert(0, Tuple.Create("Tags", Context.GetLink("tags/index.html")));
            }
            if(Documents[Blog.BlogPosts].Any() && Context.Bool(BlogKeys.GenerateArchive))
            {
                pages.Insert(0, Tuple.Create("Blog", Context.GetLink(Context.String(BlogKeys.PostsPath) + "/index.html")));
            }
            foreach(Tuple<string, string> page in pages)
            {
                <li><a class="menu__item" href="@(page.Item2)">@(page.Item1)</a></li>
            }
        }
    </ul>
    <script>
        (function(){
            let links = document.getElementsByClassName("menu__item");
            for(let i = 0; i < links.length; ++i){
                if(links[i].pathname == "/" && links[i].pathname == location.pathname){
                    links[i].classList.add("menu__item--selected");
                } else if(links[i].pathname != "/" && location.pathname.startsWith(links[i].pathname)){
                    links[i].classList.add("menu__item--selected");      
                }
            }
            
            
        })();
    </script>
</section>